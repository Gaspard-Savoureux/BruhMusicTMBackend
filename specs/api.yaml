openapi: "3.0.2"
info:
  title: BruhMusicTM Backend Documentation
  version: "1.0"
servers:
  - url: http://home.gaspardsavoureux.ca/
paths:
  /auth/create-token:
    post:
      tags:
        - Authentication
      summary: Route pour créer un jeton d'authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenCreationPayload"
      responses:
        "200":
          description: l'utilisateur existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenCreationResponse"
        "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Route pour créer un compte utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationPayload"
      responses:
        "201":
          description: La réponse losrque l'utilisateur est créé.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreationResponse"
        "400":
          description: formulaire invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "409":
          description: l'utilisateur existe déjà
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  
  /user:
    get:
      tags:
        - User
      summary: Route pour accèder aux informations de l'employé actuel.
      security:
        - bearerAuth: []
      description: Route pour accèder aux informations de l'employé actuel grâce à son jeton d'authentification.
      responses:
        "200":
          description: retourne un(e) employé(e) avec leurs informations.
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - id
                  - username
                properties:
                  email:
                    type: string
                  id:
                    type: integer
                  username:
                    type: string
                  followers:
                    type: integer
                  following:
                    type: integer
                  signed_up:
                    type: string 
                    format: date-time
                    pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})_([0-2][0-9]):([0-6][0-9]):([0-6][0-9])/
                    example: "2019-05-17_12:45:03" 
                  
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
    put:
      tags:
        - User
      summary: Route pour accèder aux informations de l'employé actuel.
      security:
        - bearerAuth: []
      description: Route pour accèder aux informations de l'employé actuel grâce à son jeton d'authentification.
      responses:
        "200":
          description: retourne un(e) employé(e) avec leurs informations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

    delete:
      tags:
        - User
      summary: Route pour supprimer un user.
      security:
        - bearerAuth: []
      description: Route supprimant un user en obtenant son id via le token fournit.
      responses:
        "200":
          description: retourne un(e) employé(e) avec leurs informations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

    
  /music:
    post:
     tags:
       - Music
     security:
       - bearerAuth: []
     description: Route pour uploader les musics.
     responses:
       "201":
         description: Réponse lorsque la musique est créé.
         content:
           application/json:
             schema:
               type: object
               properties:
                 added:
                   type: boolean
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
    get:
     tags:
      - Music
     description: Route pour retourner toutes les musics ou les musiques correspondant à la recherche.
     parameters:
        - in: query
          name: title
          schema:
            type: string
          description: critère de recherche pour retourner les chansons.
     responses:
       "201":
         description: Réponse retournant les informations conçernant la ou les musique(s) choisie(s).
         content:
           application/json:
             schema:
               type: array
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /music/{id}:         
    get:
     tags:
      - Music
     description: Route pour retourner les informations les musics.
     parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: L'id de la musique cherchée.
     responses:
       "201":
         description: Réponse retournant les informations conçernant la musique choix.
         content:
           application/json:
             schema:
               type: object
               properties:
                 added:
                   type: boolean
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
    delete:
      tags:
        - Music
      summary: Route pour supprimer une musique.
      security:
        - bearerAuth: []
      description: Route supprimant une musique en via le id de celle-ci.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: L'id de la musique cherchée.
      responses:
        "200":
          description: retourne un message confirmant le résultat désiré.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /music/user/{userId}:         
    get:
     tags:
      - Music
     description: Route pour retourner les informations les musics.
     parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: L'id de la musique cherchée.
     responses:
       "201":
         description: Réponse retournant les informations conçernant la musique choix.
         content:
           application/json:
             schema:
               type: object
               properties:
                 music:
                   type: array
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /user-playlist:
    post:
     tags:
       - user-playlist
     security:
       - bearerAuth: []
     description: Route ajouter une playlist.
     responses:
       "201":
         description: Réponse lorsque la playlist est créé.
         content:
           application/json:
             schema:
               type: object
               properties:
                 added:
                   type: boolean
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "409":
          description: l'utilisateur existe déjà
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conflict"
    get:
     tags:
      - user-playlist
     description: Route pour retourner toutes les playlist d'un utilisateur.
     responses:
       "200":
         description: Réponse contenant les informations conçernant la ou les playlist(s) retournée(s).
         content:
           application/json:
             schema:
              type: array
              items:
                $ref: "#/components/schemas/Playlist"
                 
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /user-playlist/{id}:
    get:
     tags:
      - user-playlist
     description: Route pour retourner les informations d'une playlist.
     parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: L'id de la playlist cherchée.
     responses:
       "200":
         description: informations de la playlist choisis.
         content:
           application/json:
             schema:
                $ref: "#/components/schemas/Success"
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
    delete:
      tags:
        - user-playlist
      summary: Route pour supprimer une playlist.
      security:
        - bearerAuth: []
      description: Route supprimant une playlist en via le id de celle-ci.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: L'id de la playlist cherchée.
      responses:
        "200":
          description: retourne un message confirmant le résultat désiré.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /user-playlist/user/{userId}:         
    get:
     tags:
      - user-playlist
     description: Route pour toutes les playlist d'un user.
     parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: L'id du user.
     responses:
       "200":
         description: Réponse retournant une liste des playlists de l'utilisateur.
         content:
           application/json:
             schema:
               type: object
               properties:
                 music:
                   type: array
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /playlists-music:
    post:
     tags:
       - playlists-music
     security:
       - bearerAuth: []
     description: Route ajouter une musique dans une playlist.
     responses:
       "201":
         description: Réponse lorsque la musique est ajouté dans la playlist.
         content:
           application/json:
             schema:
               type: object
               properties:
                 added:
                   type: boolean
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "409":
          description: La musique est déjà dans la playlist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conflict"
    delete:
      tags:
        - playlists-music
      summary: Route pour retirez une musique d'une playlist.
      security:
        - bearerAuth: []
      description: Route supprimant une musique dans une playlist via leur id respectif.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - playlistId
                - musicId
      responses:
        "200":
          description: retourne un message confirmant le résultat désiré.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
    # get:
    #  tags:
    #   - playlists-music
    #  description: Route pour retourner toutes les playlist d'un utilisateur.
    #  responses:
    #    "200":
    #      description: Réponse contenant les informations conçernant la ou les playlist(s) retournée(s).
    #      content:
    #        application/json:
    #          schema:
    #            type: object
    #            properties:
    #             id:
    #               type: integer
    #             name:
    #               type: string
    #             description:
    #               type: string
    #             followers:
    #               type: string
                 
    #    "401":
    #       description: Non authorizé
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/Unauthorized"
    #    "404":
    #       description: Non trouvé
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/NotFound"
  /playlists-music/{playlistId}:
    get:
     tags:
      - playlists-music
     description: Route pour retourner les musiques appartenant à une playlist.
     parameters:
        - in: path
          name: playlistId
          schema:
            type: integer
          required: true
          description: L'id de la playlist cherchée.
     responses:
       "200":
         description: musiques de la playlist choisis.
         content:
           application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Music"
 
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
    delete:
      tags:
        - playlists-music
      summary: Route pour supprimer une playlist.
      security:
        - bearerAuth: []
      description: Route supprimant une playlist en via le id de celle-ci.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: L'id de la playlist cherchée.
      responses:
        "200":
          description: retourne un message confirmant le résultat désiré.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /album:
    post:
     tags:
       - album
     security:
       - bearerAuth: []
     description: Route ajouter un album.
     requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - genre
                - releaseDate
                - musicIds
              properties:
                name:
                  type: string
                genre:
                  type: string
                releaseDate:
                  type: string 
                  format: date
                  example: "2019-05-17" 
                musicIds:
                  type: array
                  items: 
                    type: integer 
    
     responses:
       "201":
         description: Réponse lorsque l'album est créé.
         content:
           application/json:
             schema:
               type: object
               properties:
                 created:
                   type: boolean
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "400":
          description: Mauvaise requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
       "409":
          description: l'utilisateur existe déjà
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conflict"
    get:
     tags:
      - album
     description: Route pour retourner toutes les playlist d'un utilisateur.
     responses:
       "200":
         description: Réponse contenant les informations conçernant la ou les playlist(s) retournée(s).
         content:
           application/json:
             schema:
              type: array
              items:
                $ref: "#/components/schemas/Playlist"
                 
       "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
       "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenCreationPayload:
      type: object
      required:
        - userCred
        - password
      properties:
        userCred:
          type: string
        password:
          type: string
    TokenCreationResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    TokenCreationError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    UserCreationPayload:
      type: object
      required:
        - password
        - email
        - username
      properties:
        password:
          type: string
        email:
          type: string
        username:
          type: string

    UserCreationResponse:
      type: object
      required:
        - created
      properties:
        created:
          type: boolean

    MusicCreationPayload:
      type: object
      required:
        - title
        - duration
      properties:
        title:
          type: string
        duration:
          type: number
    Playlist:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        playlist_id:
          type: integer
        name:
          type: string
        description:
          type: string
        followers:
          type: integer
    Music:
      type: object
      properties:
        id:
          type: integer
        music_id: 
          type: integer
        playlist_id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        followers:
          type: integer
        title:
          type: string
        file_name:
          type: string
        duration:
          type: number
        plays:
          type: integer
        uploaded:
          type: string 
          format: date-time
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})_([0-2][0-9]):([0-6][0-9]):([0-6][0-9])/
          example: "2019-05-17_12:45:03" 
        image:
          type: string
          nullable: true
        user_id:
          type: integer
        album_id:
          type: integer
          nullable: true
    Success:
      type: object
      properties:
        msg:
          type: string
    Unauthorized:
      type: object
      properties:
        message:
          type: string
    NotFound:
      type: object
      properties:
        message:
          type: string
    Conflict:
      type: object
      properties:
        message:
          type: string
    BadRequest:
      type: object
      properties:
        message:
          type: string