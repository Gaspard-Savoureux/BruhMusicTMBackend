openapi: "3.0.2"
info:
  title: GoboAPI
  version: "1.0"
servers:
  - url: http://home.gaspardsavoureux.ca/
paths:
  /auth/create-token:
    post:
      tags:
        - Authentication
      summary: Route pour créer un jeton d'authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenCreationPayload"
      responses:
        "200":
          description: l'utilisateur existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenCreationResponse"
        "401":
          description: Non authorizé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Route pour créer un compte utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationPayload"
      responses:
        "201":
          description: La réponse losrque l'utilisateur est créé.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreationResponse"
        "400":
          description: formulaire invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "409":
          description: l'utilisateur existe déjà
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  
  # /user:
  #   get:
  #     tags:
  #       - User
  #     summary: Route pour accèder aux informations de l'employé actuel.
  #     security:
  #       - bearerAuth: []
  #     description: Route pour accèder aux informations de l'employé actuel grâce à son jeton d'authentification.
  #     responses:
  #       "200":
  #         description: retourne un(e) employé(e) avec leurs informations.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ResponseEmployePayload'
  #       "404":
  #         description: Non trouvé
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/NotFound"
    
  /upload:
    post:
     tags:
       - Message
    #  security:
    #    - bearerAuth: []
     description: Route pour créer un message global pour l'entreprise.
     responses:
       "201":
         description: La réponse lorsque l'évenement est créé.
         content:
           application/json:
             schema:
               type: object
               properties:
                 added:
                   type: boolean

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenCreationPayload:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
    TokenCreationResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    TokenCreationError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    UserCreationPayload:
      type: object
      required:
        - password
        - email
        - username
      properties:
        password:
          type: string
        email:
          type: string
        username:
          type: string

    UserCreationResponse:
      type: object
      required:
        - created
      properties:
        created:
          type: boolean
    Unauthorized:
      type: object
      properties:
        status:
          type: string
    NotFound:
      type: object
      properties:
        status:
          type: string
